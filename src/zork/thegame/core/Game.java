package zork.thegame.core;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import zork.thegame.controller.Command;import zork.thegame.controller.Constants;import zork.thegame.controller.MapPrinter;import zork.thegame.controller.Parser;import zork.thegame.model.Room;import zork.thegame.model.decorative.Desk;import zork.thegame.model.decorative.Window;import zork.thegame.model.heal.Potion;import zork.thegame.model.inter.Object;import zork.thegame.model.rooms.Elevator;import zork.thegame.model.rooms.MyOffice;import zork.thegame.model.rooms.Stairs;import zork.thegame.model.type.Weapon;import zork.thegame.model.weapons.Gun;/** * Class Game - the main class of the "Zork" game. *  * This class is the main class of the "Zork" application. Zork is a very * simple, text based adventure game. Users can walk around some scenery. That's * all. It should really be extended to make it more interesting! *  * To play this game, create an instance of this class and call the "play" * routine. *  * This main class creates and initialises all the others: it creates all rooms, * creates the parser and starts the game. It also evaluates the commands that * the parser returns. */class Game {	private static final String HELP = "help";	private static final String GO = "go";	private static final String QUIT = "quit";	private static final String ATTACK = "attack";	private static final String GET = "get";	private static final String INVENTORY = "inv";	private static final String USE = "use";	private static final String BACK = "back";	private static final String MAP = "map";	private static final String LEAVE = "leave";	private static final String EXAMINE = "examine";	private static final String UP = "up";	private static final String DOWN = "down";	private Parser parser;	private Room currentRoom;	private Map<String, Object> inventory;	private int life = 100;	private int floor = 0;	private int myFloor = 1;	private Set<String> set;	private Room office, storage, lobby, stairsAtrium,			elevatorAtrium;	private Room r2, r3, r4, r5;	private Room terrace, spaceship;	private Elevator elevator;	private Stairs stairs;	private MyOffice myOffice;	/**	 * Create the game and initialise its internal map.	 */	public Game() {		initGame();		parser = new Parser();		inventory = new HashMap<String, Object>();		set = inventory.keySet();	}	/**	 * Create all the rooms and link their exits together.	 */	private void initGame() {		/** 1st floor */		myOffice = new MyOffice();		office = new Room("Office 1st floor", 8, 1);		storage = new Room("Storage 1st floor", 7, 1);		lobby = new Room("lobby 1st floor", 5, 1);		stairsAtrium = new Room("stairs atrium 1st floor", 4, 1);		elevatorAtrium = new Room("elevator atrium 1st floor", 6, 1);		elevator = new Elevator("ELEVATOR");		stairs = new Stairs("STAIRS");		// initialise room exits		// n s o e		myOffice.setExits(null, lobby, null, null);		lobby.setExits(myOffice, office, stairsAtrium, elevatorAtrium);		storage.setExits(stairsAtrium, null, null, null);		stairsAtrium.setExits(stairs, storage, null, null);		elevatorAtrium.setExits(elevator, null, lobby, null);		office.setExits(lobby, null, null, null);		stairs.setExits(null, stairsAtrium, null, null);		elevator.setExits(null, elevatorAtrium, null, null);		/** 2nd floor */		r2 = new Room("room 2 2nd floor", 2, 2);		r4 = new Room("room 4 2nd floor", 4, 2);		r5 = new Room("room 5 2nd floor", 5, 2);		r2.setExits(null, r5, null, elevator);		r4.setExits(stairs, null, null, r5);		r5.setExits(r2, r4, null, null);		/** 3rd floor */		terrace = new Room("terrace 3rd floor", 2, 3);		spaceship = new Room("spaceship trd floor", 3, 3);		terrace.setExits(null, spaceship, stairs, elevator);		spaceship.setExits(terrace, null, null, null);		myOffice.addObject(new Gun());		myOffice.addObject(new Potion());		myOffice.addObject(new Desk());		myOffice.addObject(new Window());		currentRoom = myOffice; // start game outside	}	/**	 * Main play routine. Loops until end of play.	 */	public void play() {		printWelcome();		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	/**	 * Print out the opening message for the player.	 */	private void printWelcome() {		Intro.printIntro();		System.out.println();		System.out.println("> Type 'help' if you need help, 'map' to view map");		System.out.println();		System.out.println("> " + currentRoom.getDescription());	}	/**	 * Given a command, process (that is: execute) the command. If this command	 * ends the game, true is returned, otherwise false is returned.	 */	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		switch (command.getCommandWord()) {		case GO:			changeRoom(command);			break;		case GET:			get(command.getSecondWord());			break;		case LEAVE:			leave(command.getSecondWord());			break;		case INVENTORY:			showInventory();			break;		case ATTACK:			attack();			break;		case BACK:			back();			break;		case EXAMINE:			examine(command.getSecondWord());			break;		case USE:			useObject(command.getSecondWord());			break;		case UP:			upFloor();			break;		case DOWN:			downFloor();			break;		case MAP:			showMap();			break;		case HELP:			printHelp();			break;		case QUIT:			if (command.hasSecondWord())				System.out.println("Quit what?");			else				return true;			break;		default:			break;		}		return false;	}	private void upFloor() {		if (!(currentRoom instanceof Stairs)) {			System.out					.println("Devi essere nelle scale per usare questo comando!!");			return;		}		stairs = (Stairs) currentRoom;		switch (myFloor) {		case 1:			stairs.setExits(null, r4, null, null);			myFloor = 2;			stairs.setFloor(2);			System.out.println("Sei arrivato al 2° piano");			break;		case 2:			System.out.println("Le scale sono inagibili");			break;		case 3:			System.out.println("Non puoi andare sul tetto");			break;		default:			break;		}	}	private void downFloor() {		if (!(currentRoom instanceof Stairs)) {			System.out					.println("Devi essere nelle scale per usare questo comando!!");			return;		}		stairs = (Stairs) currentRoom;		switch (myFloor) {		case 1:			System.out.println("Non puoi scendere ancora");			break;		case 2:			stairs.setExits(null, stairsAtrium, null, null);			myFloor = 1;			stairs.setFloor(1);			System.out.println("Sei arrivato al 1° piano");			break;		case 3:			System.out.println("Le scale sono inagibili");			break;		default:			break;		}	}	/** COMMANDS **/	private void examine(String obj) {		if (obj == null)			/* code for room descritpion */			System.out.println(currentRoom.getDescription());		else if (currentRoom.containsObject(obj))			/* code for object descritpion */			System.out.println(currentRoom.getObjs().get(obj).getPropDescr());		else			System.out.println("> Niente da esaminare");	}	private void showMap() {		MapPrinter.printMap(currentRoom, myFloor);	}	private void back() {		// da aggiustare		currentRoom = currentRoom.getPreviousRoom();		System.out.println();		System.out.println(currentRoom.getDescription());	}	private void useObject(String obj) {		if (set.contains(obj)) {			String res = inventory.get(obj).use();			if (res != null)				System.out.println(res);			else				System.out.println("Non puoi usare questo oggetto!!");		}	}	private void showInventory() {		int w = 0;		System.out.println(" * Inventory *");		System.out.println();		for (String elem : set) {			System.out.println(" - " + elem);			w += inventory.get(elem).getWeight();		}		System.out.println();		System.out.println("Your weight is of: " + w + "/10");	}	private void get(String obj) {		if (obj == null) {			System.out.println("Prendi cosa??");			return;		}		if (currentRoom.containsObject(obj)) {			inventory.put(obj, currentRoom.getObjs().get(obj));			currentRoom.getObjs().remove(obj);			System.out.println("> Preso " + obj);			return;		}		else			System.out.println("Nessun " + obj + " nella stanza.");	}	private void leave(String obj) {		if (set.contains(obj)) {			currentRoom.addObject(inventory.get(obj));			inventory.remove(obj);			System.out.println("> Gettato " + obj);		}		else			System.out.println("> Tu non possiedi " + obj);	}	private void attack() {		List<Weapon> weapons = new ArrayList<Weapon>();		for (String elem : set) {			if (inventory.get(elem) instanceof Weapon)				weapons.add((Weapon) inventory.get(elem));		}		if (weapons.size() == 0)			System.out.println(Constants.NO_WEAPON);		if (weapons.size() == 1) {			System.out.println("Attaccando con " + weapons.get(0).getName()					+ "...");			System.out.println(weapons.get(0).use());		}		if (weapons.size() > 1) {			System.out.println(Constants.CHOOSE_WEAPON);			Command command = parser.getCommand();			for (Weapon elem : weapons) {				if (elem.getName().equals(command.getCommandWord())) {					System.out.println("Attaccando con " + elem.getName()							+ "...");					/* use weapon */					System.out.println(elem.use());					/* weapon response handling */				}			}		}	}	/**	 * Print out some help information. Here we print some stupid, cryptic	 * message and a list of the command words.	 */	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at Monash Uni, Peninsula Campus.");		System.out.println();		System.out.println("Your command words are:");		parser.showCommands();	}	/**	 * Try to go to one direction. If there is an exit, enter the new room,	 * otherwise print an error message.	 */	private void changeRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");			return;		}		String direction = command.getSecondWord();		Room nextRoom = currentRoom.goRoom(direction);		if (nextRoom == null)			System.out.println("There is no door!");		else {			Room temp = currentRoom;			currentRoom = nextRoom;			nextRoom.setPreviousRoom(temp);			System.out.println(currentRoom.getDescription());			if (currentRoom instanceof Elevator) {				useElevator();			}//			if (currentRoom instanceof Stairs) {//				useStairs();//			}		}	}	private void useElevator() {		elevator = (Elevator) currentRoom;		if (!elevator.isLock()) {			Command c = parser.getFloor();			if (c.getCommandWord() != null) {				switch (c.getCommandWord()) {				case "1":					elevator.setFloor(1);					myFloor = 1;					elevator.setExits(null, elevatorAtrium, null, null);					System.out.println();					System.out.println("> Piano 1");					changeRoom(null);					break;				case "2":					elevator.setFloor(2);					myFloor = 2;					elevator.setExits(null, null, r2, null);					System.out.println();					System.out.println("> Piano 2");					break;				case "3":					elevator.setFloor(3);					myFloor = 3;					elevator.setExits(null, null, terrace, null);					System.out.println();					System.out.println("> Piano 3");					break;				default:					System.out.println("> Piano di destinazione non valido");					break;				}			}		}	}	public static void main(String[] args) {		new Game().play();	}}