package zork.thegame.model;/* *  * This class is part of Zork. Zork is a simple, text based adventure game. * * "Room" represents one location in the scenery of the game.  It is  * connected to at most four other rooms via exits.  The exits are labelled * north, east, south, west.  For each direction, the room stores a reference * to the neighbouring room, or null if there is no exit in that direction. */import java.util.Map;import java.util.Set;import java.util.HashMap;import java.util.Iterator;import zork.thegame.model.inter.Object;public class Room {	private String description;	private Room prevRoom;	private HashMap<String, Room> exits; // stores exits of this room.	private Map<String, Object> objs;	private Set<String> objectlist;	public Set<String> getObjectlist() {		return objectlist;	}	private int position;	private int floor;	public int getPosition() {		return position;	}	public int getFloor() {		return floor;	}	public Map<String, Object> getObjs() {		return objs;	}	public void addObject(Object obj){		objs.put(obj.getName(), obj);	}	/**	 * Create a room described "description". Initially, it has no exits.	 * "description" is something like "a kitchen" or "an open court yard".	 */	public Room(String description, int position, int floor) {		this.description = description;		exits = new HashMap<String, Room>();		objs = new HashMap<String, Object>();		objectlist = objs.keySet();		this.position = position;		this.floor = floor;	}	/**	 * Define the exits of this room. Every direction either leads to another	 * room or is null (no exit there).	 */	public void setExits(Room north, Room south, Room west, Room east) {		if (north != null)			exits.put("north", north);		if (east != null)			exits.put("east", east);		if (south != null)			exits.put("south", south);		if (west != null)			exits.put("west", west);	}	/**	 * Return a long description of this room, on the form: You are in the	 * kitchen. Exits: north west	 */	public String getDescription() {		return "You are in " + description + ".\n" + exitString();	}	public boolean containsObject(String obj){		return objectlist.contains(obj);	}	/**	 * Return a string describing the room's exits, for example	 * "Exits: north west ".	 */	protected String exitString() {		String returnString = "Exits:";		Set<String> keys = exits.keySet();		for (Iterator<String> iter = keys.iterator(); iter.hasNext();)			returnString += " " + iter.next();		return returnString;	}	/**	 * Return the room that is reached if we go from this room in direction	 * "direction". If there is no room in that direction, return null.	 */	public Room goRoom(String direction) {		return (Room) exits.get(direction);	}		public Room getPreviousRoom() {		return prevRoom;	}	public void setPreviousRoom(Room lastRoom) {		this.prevRoom = lastRoom;	}}